createdAt: "2018-08-21T08:37:10.888Z"
updatedAt: "2019-11-19T07:23:12.390Z"
type: "MARKDOWN_NOTE"
folder: "ad6154a9448de75c2a2e"
title: "orm 整理"
content: '''
  # orm 整理
  
  > #### 随机查询 并显示10条
  > 
      Career.objects.order_by('?',)[:10]
      
  - order_by() 可以加多条件
  
  > #### filter(a = <如果是个queryset>)   要用 `a__in = [queryset]`
  > 
  
  > ### __range 获取两个日期之间的过滤
      Entry.objects.filter(pub_date__range=(start_date, end_date))
  
  >#### queryset.value() 可以获取到值 结构是 [{},{},{}]
  >
      City.objects.filter(is_hot=True).values()
      
      
  > ##### 模拟 python manage.py shell_plus 环境 《需要 django-extensions 模块》
  > ##### python manage.py show_urls  列出所有url
  > 
  
  ```
  import os
  import sys
  import django
  
  # 设置项目启动目录
  BASE_DIR = os.path.dirname(os.path.abspath(__file__))
  sys.path.insert(0, BASE_DIR)
  sys.path.insert(0, os.path.join(BASE_DIR, '../..'))
  os.environ.setdefault("DJANGO_SETTINGS_MODULE", "serverDev.settings")
  #模拟 shell 环境
  django.setup()  
  
  from company.models import Company, Career
  ```
  
  >#### orm 查询 利用 原始sql  达到以首字母拼音排序
  > 
  [Django ORM复杂查询 - 为程序员服务](http://ju.outofmemory.cn/entry/115057)
  
  
  >####  django2.0 on_delete 的参数
   [django2.0 关联表的必填on_delete参数的含义 - buxianghejiu的博客 - CSDN博客](https://blog.csdn.net/buxianghejiu/article/details/79086011)
   
   > #### djago quesrset 按给定list 排序
   > 
  
  [python - Django QuerySet Custom Ordering by ID - Stack Overflow](https://stackoverflow.com/questions/3625641/django-queryset-custom-ordering-by-id)
  
  
  > #### django orm model 字段使用 用一个列表做字段list，还能筛选
  > 
  [List Fields — Django-MySQL 2.4.1 documentation](https://django-mysql.readthedocs.io/en/latest/model_fields/list_fields.html)
  
  
  > order_by(*args) 可以多字段名 ，判断逻辑是 依次（判断不出 就用下一个字段判断）
  > 
  
  > ### Django 将数据批量插入数据库bulk_create()
  > 
  [Django 将数据批量插入数据库bulk_create() - heybob的专栏 - CSDN博客](https://blog.csdn.net/heybob/article/details/50474640)
  
  > ### 根据外键对django对象进行分组
  > [python: 根据外键对django对象进行分组](https://xbuba.com/questions/52869807)
  
  ```
  # 如果你有一个模型 student
  class Student(models.Model):
      id=models.AutoField(primary_key=True)
      parent=models.ForeignKey(parent)
      name=models.CharField()
      age=models.IntegerField()
      
  # 使用 itertools.groupby
  from itertools import groupby
  from operator import attrgetter, itemgetter
  
  result = [
      list(v)
      for _, v in groupby(Student.objects.order('parent_id'), attrgetter('parent_id'))
  ]
  
  # 如果 想为 parent 对象映射到 student 列表的地方做一个字典：
  result = {
      k: list(v)
      for k, v in groupby(
          Student.objects.prefetch_related('parent').order('parent_id'),
          attrgetter('parent'))
  }
      
      
      
      
  ```
  
  >### group by date (month, day, year)
  >
  [Django: Group by date (day, month, year) - Stack Overflow](https://stackoverflow.com/questions/8746014/django-group-by-date-day-month-year)
  ```
  from django.db.models.functions import TruncMonth
  from django.db.models import Count
  
  Sales.objects
      .annotate(month=TruncMonth('timestamp'))  # Truncate to month and add to select list
      .values('month')                          # Group By month
      .annotate(c=Count('id'))                  # Select the count of the grouping
      .values('month', 'c')                     # (might be redundant, haven't tested) select month and count 
  Older versions
  
  from django.db import connection
  from django.db.models import Sum, Count
  
  truncate_date = connection.ops.date_trunc_sql('month', 'created')
  qs = Order.objects.extra({'month':truncate_date})
  report = qs.values('month').annotate(Sum('total'), Count('pk')).order_by('month')
  ```
  ```
  >>> import pytz
  >>> melb = pytz.timezone('Australia/Melbourne')
  >>> experiments_per_month = Experiment.objects.annotate(
  ...    month=TruncMonth('start_datetime', tzinfo=melb)).values('month').annotate(
  ...    experiments=Count('id'))
  >>> for exp in experiments_per_month:
  ...     print(exp['month'], exp['experiments'])
  ```
  
  > ### prefetch_related() & select_related()
  > 
  [pythonのdjango select_related 和 prefetch_related() - IT閱讀](https://www.itread01.com/content/1546998184.html)
  select_related()
  - 主要针对 一对一或者多对一 进行优化
  - 优化方式是 join 语句进行优化查询次数
  - 可以使用 ‘__’ 链接查询，再次访问django 会再次sql查询
  - 可以使用 depth 指定查询深度，会取指定深度的所有栏位
  - 可以重复使用 .select_related() 链式查询
  
  prefetch_related()
  - 主要针对 ManyToManyField & ForiegnKey 使用
  - 优化方式： 分别查询每个表，然后用python 处理他们之间的关系
  
  
'''
tags: []
isStarred: false
isTrashed: false
linesHighlighted: []
